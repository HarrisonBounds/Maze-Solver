use stack for dfs
use queue for bfs


keep track of:
    visited_stack
    cur_path





loop through rows:
    loop through cols:
        get cur_square
        add cur_square to cur_path
        if dfs (cur_square, cur_path, visited_stack): // solution found
            print SOLUTION FOUND
            return cur_path
print NO SOLUTION


def dfs (cur, cur_path, visited_stack)
    UPDATE VISUAL EACH DFS becuase it is each step/ square check HERE??

    if cur == goal
        add cur to cur_path
        return true

    add cur to cur_path

    if cur_neighbors length > 0: // square has neighbors so check them
        for neigh in cur_neighbors
            if neigh not in visited_stack:
                dfs (neigh, cur_path, visited_stack)
    
    add cur to visited_stack // done checking cur and its neighbors so can add it to visited stack
