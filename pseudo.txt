use stack for dfs
use queue for bfs


keep track of:
    visited_stack
    cur_path
    sln_path




loop through rows:
    loop through cols:
        get cur_square
        add cur_square to cur_path
        add cur_square to sln_path
        mark cur_square as visited
        if dfs (cur_square): // solution found
            print SOLUTION FOUND
            return sln_path by popping off squares from the stack
print NO SOLUTION


def dfs (cur)
    UPDATE VISUAL EACH DFS becuase it is each step/ square check HERE??

    add cur_square to cur_path                   // COLOR
    add cur_square to sln_path
    mark cur_square as visited

    if cur == goal
        return true

    add cur to cur_path

    while cur_neighbors length > 0: // square has neighbors so check them
        neigh = pop neigh from cur_neighbors
            if neigh not visited:
                return dfs (neigh)
    
    remove cur_square from cur_path                   // COLOR
    remove cur_square from sln_path
    return false